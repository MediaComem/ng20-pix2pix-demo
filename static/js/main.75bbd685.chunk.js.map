{"version":3,"sources":["serviceWorker.js","libs/CanvasProcessor.js","redux/actions/models.js","redux/actionsTypes.js","components/ModelList.js","components/DrawingCanvas.js","components/Pix2Pix.js","App.js","redux/reducers/models.js","redux/reducers/index.js","redux/stores.js","index.js"],"names":["Boolean","window","location","hostname","match","fetchPix2PixModel","modelURL","a","ml5","transformCanvas","canvas","pix2pixLoadedModel","transfer","loadModelList","dispatch","type","Promise","resolve","reject","setTimeout","id","name","url","then","modelList","payload","ModelList","connect","modelReducer","isLoadingModelList","modelListLoadingFailedError","selectedModel","selectModel","props","useEffect","className","map","model","key","onClick","clear","canvasWidth","canvasHeight","ctx","getContext","fillStyle","fillRect","DrawingCanvas","useState","isMouseDown","setIsMouseDown","currCanvas","setCurrCanvas","x","y","currMousePos","setCurrMousePos","CANVAS","useRef","current","ref","width","height","onMouseDown","onMouseUp","onCanvasDrawingChange","onMouseLeave","e","onMouseMove","newMousePos","rect","getBoundingClientRect","clientX","left","clientY","top","getMousePosFromCanvas","lastMousePos","beginPath","moveTo","lineTo","stroke","draw","Pix2Pix","processedImgURL","updateCanvas","processCanvas","loadedModel","result","src","catch","error","isFetching","alt","App","initialState","isLoadingModel","modelLoadingFailedError","combineReducers","state","action","console","log","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.75bbd685.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as ml5 from \"ml5\";\n\nexport const fetchPix2PixModel = async (modelURL) => {\n  return ml5.pix2pix(modelURL)\n}\n\nexport const transformCanvas = async (canvas, pix2pixLoadedModel) => {\n  return pix2pixLoadedModel.transfer(canvas);\n}","import {\n  LOAD_MODEL_LIST,\n  LOAD_MODEL_LIST_FULLFILL,\n  SELECT_MODEL,\n  UPDATE_CANVAS,\n  PROCESS_CANVAS,\n  LOAD_MODEL,\n  LOAD_MODEL_FULLFILL,\n  LOAD_MODEL_FAILED,\n  PROCESS_CANVAS_FAILED,\n  PROCESS_CANVAS_FULLFILL\n} from '../actionsTypes';\nimport { fetchPix2PixModel, transformCanvas } from '../../libs/CanvasProcessor';\n\nconst fetchModelList = () =>\n  new Promise((resolve, reject) => {\n    setTimeout(\n      () =>\n        resolve([\n          {\n            id: 1,\n            name: 'edges2cat',\n            url: 'models/edges2cats_AtoB.pict'\n          },{\n            id: 2,\n            name: 'pikachu',\n            url: 'models/edges2pikachu.pict'\n          }\n        ]),\n      50\n    );\n  });\n\nexport const loadModelList = () => {\n  return (dispatch) => {\n    dispatch({ type: LOAD_MODEL_LIST });\n    fetchModelList().then((modelList) =>\n      dispatch({ type: LOAD_MODEL_LIST_FULLFILL, payload: modelList })\n    );\n  };\n};\n\nexport const selectModel = (model) => {\n  return { type: SELECT_MODEL, payload: model };\n};\n\nexport const updateCanvas = (canvas) => {\n  return { type: UPDATE_CANVAS, payload: canvas };\n};\n\nexport const processCanvas = (canvas, model) => {\n  return (dispatch) => {\n    dispatch({ type: PROCESS_CANVAS });\n\n    dispatch({ type: LOAD_MODEL });\n\n    fetchPix2PixModel(model.url)\n      .then((loadedModel) => {\n        dispatch({ type: LOAD_MODEL_FULLFILL });\n        transformCanvas(canvas, loadedModel)\n          .then((result) => {\n            dispatch({ type: PROCESS_CANVAS_FULLFILL, payload: result.src });\n          })\n          .catch((error) =>\n            dispatch({ type: PROCESS_CANVAS_FAILED, payload: error })\n          );\n      })\n      .catch((error) => dispatch({ type: LOAD_MODEL_FAILED, payload: error }));\n  };\n};\n","export const SELECT_MODEL = \"SELECT_MODEL\";\nexport const LOAD_MODEL_LIST = \"LOAD_MODEL_LIST\";\nexport const LOAD_MODEL_LIST_FULLFILL = \"LOAD_MODEL_LIST_FULLFILL\";\nexport const LOAD_MODEL_LIST_FAILED = \"LOAD_MODEL_LIST_FAILED\";\nexport const LOAD_MODEL = \"LOAD_MODEL\";\nexport const LOAD_MODEL_FULLFILL = \"LOAD_MODEL_FULLFILL\";\nexport const LOAD_MODEL_FAILED = \"LOAD_MODEL_FAILED\";\nexport const UPDATE_CANVAS = \"UPDATE_CANVAS\"\nexport const PROCESS_CANVAS = \"PROCESS_CANVAS\";\nexport const PROCESS_CANVAS_FULLFILL = \"PROCESS_CANVAS_FULLFILL\";\nexport const PROCESS_CANVAS_FAILED = \"PROCESS_CANVAS_FAILED\";","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { loadModelList, selectModel } from '../redux/actions/models';\n\nconst mapStateToProps = ({ modelReducer }) => {\n  return {\n    modelList: modelReducer.modelList,\n    isLoadingModelList: modelReducer.isLoadingModelList,\n    modelListLoadingFailedError: modelReducer.modelListLoadingFailedError,\n    selectedModel: modelReducer.selectedModel\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loadModelList: () => dispatch(loadModelList()),\n    selectModel: (id)=> dispatch(selectModel(id))\n  };\n};\n\nconst ConnectedModelList = (props) => {\n  const {\n    modelList,\n    isLoadingModelList,\n    modelListLoadingFailedError,\n    selectedModel,\n    selectModel,\n    loadModelList\n  } = props;\n  useEffect(() => {\n    loadModelList();\n  }, [loadModelList]);\n\n  if (isLoadingModelList) {\n    return <div>loading....</div>;\n  }\n\n  if (modelListLoadingFailedError !== null) {\n    return <div>Error: {modelListLoadingFailedError}</div>;\n  }\n\n  return (\n    <ul id={props.id} className={props.className}>\n      {modelList.map((model) => (\n        <li key={model.id} className={selectedModel?.id === model.id ? 'active' : ''}>\n          <button onClick={() => selectModel(model)}>{model.name}</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport const ModelList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedModelList);\n","import './DrawingCanvas.css'\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst getMousePosFromCanvas = (canvas, e) => {\n  var rect = canvas.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left,\n    y: e.clientY - rect.top\n  };\n};\n\nconst clear = (canvas, canvasWidth, canvasHeight) => {\n  const ctx = canvas.getContext('2d');\n  ctx.fillStyle = '#ffffff';\n  ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n};\n\nconst draw = (canvas, lastMousePos, currMousePos) => {\n  const ctx = canvas.getContext('2d');\n\n  ctx.beginPath();\n  ctx.moveTo(lastMousePos.x, lastMousePos.y);\n  ctx.lineTo(currMousePos.x, currMousePos.y);\n  ctx.stroke();\n};\n\nexport const DrawingCanvas = (props) => {\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [currCanvas, setCurrCanvas] = useState(null);\n  const [currMousePos, setCurrMousePos] = useState({ x: null, y: null });\n  const CANVAS_SIZE = 512;\n  const CANVAS = useRef(null);\n\n  useEffect(() => {\n    if (!CANVAS.current) {\n      return;\n    }    \n    setCurrCanvas(CANVAS.current);\n    \n    clear(CANVAS.current, CANVAS_SIZE, CANVAS_SIZE);\n  }, []);\n\n  useEffect(() => {\n    if (props.currCanvas) {\n      setCurrCanvas(props.currCanvas);\n      return;\n    }\n  }, [props.currCanvas]);\n\n  return (\n    <div id={props.id} className={`drawingcanvas ${props.className}`}>\n      <canvas\n        ref={CANVAS}\n        width={CANVAS_SIZE}\n        height={CANVAS_SIZE}\n        onMouseDown={() => setIsMouseDown(true)}\n        onMouseUp={() => {\n          setIsMouseDown(false);\n          props.onCanvasDrawingChange && props.onCanvasDrawingChange(currCanvas);\n        }}\n        onMouseLeave={e => setIsMouseDown(false)}\n        onMouseMove={(e) => {\n          const newMousePos = getMousePosFromCanvas(currCanvas, e);\n          if (isMouseDown) {\n            draw(currCanvas, currMousePos, newMousePos);\n          }\n          setCurrMousePos(newMousePos);\n        }}\n      />\n      <button\n        onClick={() => {\n          clear(currCanvas, CANVAS_SIZE, CANVAS_SIZE);\n          props.onCanvasDrawingChange &&\n            props.onCanvasDrawingChange(currCanvas);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import './Pix2Pix.css';\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updateCanvas, processCanvas } from '../redux/actions/models';\nimport { DrawingCanvas } from './DrawingCanvas';\n\nconst mapStateToProps = ({ modelReducer }) => {\n  return {\n    selectedModel: modelReducer.selectedModel,\n    currCanvas: modelReducer.currCanvas,\n    processedImgURL: modelReducer.processedImgURL\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateCanvas: (canvas) => dispatch(updateCanvas(canvas)),\n    processCanvas: (canvas, model) => dispatch(processCanvas(canvas, model))\n  };\n};\n\nconst Pix2PixConnected = (props) => {\n  const { selectedModel, currCanvas, processedImgURL } = props;\n\n  if (!selectedModel) {\n    return <div>No model selected...</div>;\n  }\n\n  return (\n    <div id={props.id} className={`pix2pix ${props.className}`}>\n      <div className=\"pix2pix-title\">\n        <h3>Current Model: {selectedModel.name}</h3>\n      </div>\n      <div className=\"pix2pix-canvas\">\n        <DrawingCanvas\n          currCanvas={currCanvas}\n          onCanvasDrawingChange={(e) => props.updateCanvas(e)}\n        />\n      </div>\n      <div className=\"pix2pix-action\">\n        <button\n          onClick={(e) => {\n            props.processCanvas(currCanvas, selectedModel);\n          }}\n        >\n          Process\n        </button>\n      </div>\n      <div className=\"pix2pix-processed\">\n        {processedImgURL.isFetching && (\n          <div className=\"pix2pix-processed-info\">'Loading...'</div>\n        )}\n        \n        {processedImgURL.error &&\n          (typeof processedImgURL.error === 'string' ? (\n            processedImgURL.error\n          ) : (\n            <div className=\"pix2pix-processed-info\">\n              'An unknown error happened'\n            </div>\n          ))}\n\n        {processedImgURL.url && (\n          <img src={processedImgURL.url} alt=\"processed img\" />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const Pix2Pix = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Pix2PixConnected);\n","import React from 'react';\nimport './App.css';\nimport { ModelList } from './components/ModelList';\nimport { Pix2Pix } from './components/Pix2Pix';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Basic demo for ML5 Pix2Pix</h1>\n      <main>\n        <div className=\"sidebar\">\n          <h2>List of selectable model</h2>\n          <ModelList></ModelList>\n        </div>\n        <div className=\"content\">      \n          <Pix2Pix></Pix2Pix>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  SELECT_MODEL,\n  LOAD_MODEL_LIST,\n  LOAD_MODEL_FULLFILL,\n  LOAD_MODEL_FAILED,\n  LOAD_MODEL_LIST_FULLFILL,\n  LOAD_MODEL_LIST_FAILED,\n  UPDATE_CANVAS,\n  PROCESS_CANVAS,\n  PROCESS_CANVAS_FULLFILL,\n  PROCESS_CANVAS_FAILED,\n  LOAD_MODEL,\n} from '../actionsTypes';\n\nconst initialState = {\n  selectedModel: null,\n  isLoadingModel: false,\n  modelLoadingFailedError: null,\n\n  isLoadingModelList: false,\n  modelListLoadingFailedError: null,\n  modelList: [],\n\n  processedImgURL: {\n    isFetching:false,\n    error: null,\n    url: null\n  },\n\n  currCanvas: null,\n\n};\n\nexport function modelReducer(state = initialState, action) {\n  console.log(action)\n  const {type, payload} = action;\n  switch (type) {\n    case SELECT_MODEL:\n      return {\n        ...state,\n        selectedModel: payload\n      };\n\n    case LOAD_MODEL_LIST:\n      return { ...state, isLoadingModelList: true };\n\n    case LOAD_MODEL_LIST_FULLFILL:\n      return { ...state, isLoadingModelList: false, modelList: payload };\n\n    case LOAD_MODEL_LIST_FAILED:\n      return {\n        ...state,\n        isLoadingModelList: false,\n        modelListLoadingFailedError: payload.error\n      };\n\n    case LOAD_MODEL:\n      return {...state, isLoadingModel:true};\n\n    case LOAD_MODEL_FULLFILL:\n      return { ...state, isLoadingModel: false };\n\n    case LOAD_MODEL_FAILED:\n      return {\n        ...state,\n        isLoadingModel: false,\n        modelLoadingFailedError: payload.error\n      };\n\n    case UPDATE_CANVAS:\n      return {\n        ...state,\n        currCanvas: payload\n      }\n\n    case PROCESS_CANVAS:\n      return {\n        ...state,\n        processedImgURL: {\n          ...state.processedImgURL,\n          isFetching: true\n        }\n      }\n\n    case PROCESS_CANVAS_FULLFILL:\n      return {\n        ...state,\n        processedImgURL: {\n          ...state.processedImgURL,\n          isFetching: false,\n          url: payload\n        }\n      }\n\n    case PROCESS_CANVAS_FAILED:\n      return {\n        ...state,\n        processedImgURL: {\n          ...state.processedImgURL,\n          isFetching: false,\n          error: payload\n        }\n      }\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { modelReducer } from './models';\n\nexport default combineReducers({\n  modelReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport store from './redux/stores';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}